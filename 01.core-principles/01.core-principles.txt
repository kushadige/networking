- Client - Server Architecture

	* Machines are expensive, applications are complex
	* Seperate the application into two components
	* Expensive workload can be done on the server
	* Clients call servers to perform expensive tasks
	* Remote procedure call (RPC) was born
	
	Benefits:

	* Servers have beefy hardware
	* Clients have commodity hardware
	* Clients can still perform lightweight tasks
	* Clients no longer require dependencies
	* However, we need a communication model

	We need to send a call, send some data from one machine to another.
	But how should we connect them? With a telephone wire and then
	send data?
	You can do it any way you want. If you figured out how to transpose,
	if you will, the bits into radio or electric signal, you can do
	anything you want, but there is no standard.
	So we need a standard so we all can understand each other


- OSI Model (Open Systems Interconnection)

	The 7 Layers..
	Every single layer has a meaning and every application out 
	there a CDN, a Reverse Proxy, a Load Balancer and API Gateway
	has to live in one or more of these layers.


	7 Layers each describe a specific networking component
	* Layer 7 - Application - HTTP/FTP/gRPC
	* Layer 6 - Presentation - Serialization, Decoding, Encoding..
	* Layer 5 - Session - Connection establishment, TLS
	* Layer 4 - Transport - UDP/TCP
	* Layer 3 - Network - IP
	* Layer 2 - Data link - Frames, Mac address, Ethernet
	* Layer 1 - Physical - Electric signals, fiber or radio waves
	
	EXAMPLES
		1 - Example sending a POST request to an HTTPS webpage
		* Layer 7 - POST request with JSON data to HTTPS server
		* Layer 6 - Serialize JSON to flat byte strings
		* Layer 5 - Request to establish TCP connection/TLS
		* Layer 4 - Sends SYN request target port 443
		* Layer 3 - SYN is placed an IP packet(s) and adds the source/dest IPs
		* Layer 2 - Each packet goes into a single frame and adds the 
		source/dest MAC addresses
		* Layer 1 - Each frame becomes string of bits which converted into
		either a radio signal (wifi), electric signal (ethernet), or light (fiber)

		2 - Reciever computer receives the POST request the other way around
		* Layer 1 - Radio, electric or light is received and converted into
		digital bits.
		* Layer 2 - The bits from Layer 1 is assembled into frames.
		(The frames from Layer 2 are simple to enable a packet.)
		* Layer 3 - The frames from layer 2 are assembled into IP packet.
		* Layer 4 - Transport (TCP)
			> The IP packets from layer 3 are assembled into TCP segments
			> Deals with Congestion control/flow control/retransmission in case
			of TCP
			> If Segment is SYN we don't need to go further into more layers as
			we are still processing the connection request.
		* Layer 5 - Session
			> The connection session is established or identified
			> We only arrive at this layer when necessary (three way
			handshake is done)
		* Layer 6 - Deserialize flat byte strings back to JSON for the app to
		consume
		(This serialization here could be completely different from the serialization
		that happened on the client. Because you can serialize from JavaScript but
		deserialized into Python or you can serialize from C# and deserialize into Go.
		It doesn't matter. That's why a lot of people say really the presentation
		application layer is just the application. To be honest, like this is the
		application is doing this logic at the end of the day.)
		* Layer 7 - Application understands the JSON POST request and your express
		json or apache request receive event is triggered.

		
		Your server might be on fiber, but your network, you can
		have send that from Wi-Fi. See the beauty!

		 Layer4    layer3    layer2
		Segment -> Packet -> Frame


		| 	 		   Application				|
						|
						v
		|	 		   Presentation				|
						|
						v
		|	   		     Session				|
						|
						v
		|  	    (SourcePort)-Layer4(Transport)-(DestPort)		|
						|
						v
		|	       (SourceIP)-Layer3(Network)-(DestIP)		|
						|
						v
		|	      (SourceMAC)-Layer2(DataLink)-(DestMAC)		|
						|
						v
					     ...

		**You cannot put an IP packet into multiple frames unless
		you fragment.
		** "Let me deliver that segment to that application, to that process"
			> Thats the server Transform-(TCP) Layer does.
			(Each port is technically, one process is one port. This can
			 change, obviously.. But this is a general rule of thumb)


	That the client is not directly connected to the server right?
	There are switches in the middle, there are routers, there are proxies,
	there are CDN's, there are reverse proxies, you know there are load balancers..

	What are those doing in the middle? They look. They peek the content.. And when
	they peek at the content, they take a finite amount of time because they make
	decisions based on this peeking of the data.
	
	     -Client-					     -Server-

	| |Application |				   |Application | ^
	| |Presentation|				   |Presentation| |
	| |Session     |		      -Router-	   |Session	| |
	| |Transport   |    -Switch-		 	   |Transport   | |
	| |Network     |	    	  ^ |Network   | | |Network     | |
	| |Data Link   | ^ |Data Link | | | |Data Link | | |Data Link   | |
	v |Physical    | | |Physical  | v | |Physical  | v |Physical    | |


	*Switch
	>It Connects different subnets (not only subnets, can connect hosts in the same
	 subnet) together.
	 "Hey this is the subnet work, this is a subnet, this is a subnet.. I want to 
	  connect them together. And I don't want data to be sent unnecessarily to a
	  different network." -That's the power of the switch!
	>It understands where to send the data based on the frame itself. Based on the
	 MAC address.

	*Router
	>It will sometimes act like a switch if you're sending to the same subnet. But
	 the most important thing, routers need to route, and routers need the IP
	 addresses in order to route. So it needs to go up to layer three..

	--//UDP is stateless. Just send data and that's it.. There is no state like TCP.

	
	*Add a firewall!

	            			   -Load Balancer/    
	    -Client-				CDN-	       -Server-

	| |Application |      -Proxy/	  ^ |Application | | |Application | ^
	| |Presentation|     Firewall-    | |Presentation| | |Presentation| |
	| |Session     |	          | |Session     | | |Session     | |
	| |Transport   | ^ |Transport | | | |Transport   | | |Transport   | |
	| |Network     | | |Network   | | | |Network     | | |Network     | |
	| |Data Link   | | |Data Link | | | |Data Link   | | |Data Link   | |
	v |Physical    | | |Physical  | v | |Physical    | v |Physical    | |
	
	What does a firewall do? What is a firewall?
	Firewall blocks certain applications from sending data or blocks certain
	unwanted packets to come through your network. And in order to do that, it needs
	to look at the IP address. It needs to look at the ports. At least the porst,
	some firewalls are the go all the way and look at the application.
	
	For proxy, if you want to do the load balancing based on a port. "Hey, if you're
	going to a port at 80, I want you to rewrite the packet and send it to
	this address instead."
	So you can rewrite the packet right here, change it effectively and then
	send it somewhere else.
	Actually, if you think about it, your ISP can do that too. Can send you
	somewhere else if you want, if they want to. ISP is where your first packets go to.
	That's why a lot of people use VPNs.. VPN is actually a layer three protocol
	if you think about it. It takes the IP packets and put them in another IP packets.
	That's a simpler solution for the IP for the VPNs. Most VPNs doesn't do this but one
	solution is to put an IP in IP. Some VPNs are actually live in the layer two as well.

	Layer Seven Load Balancer (NGNIX)
	If I go to /whatever, /pictures -> "Go to this server if you go to /images"
	The slash, the path is actually an application concept whis is encrypted most of 
	the time. So the Layer Seven Proxies or CDNs, thep play at application layer.
	That means they decrypt everything you send, look at it, cache it, and then re-send it.

	--// Every CDN is a layer seven reverse proxy


	The shortcomings of the OSI Model
	> OSI Model has too many layers which can be hard to comprehend
	> Hard to argue about which layer does what
	> Simpler to deal with Layers 5-6-7 as just one layer, application
	> TCP/IP Model does just that

	
- TCP/IP Model
	
	Much simpler than OSI just 4 layers.
	Application (Layer 5, 6 and 7)
	Transport (Layer 4)
	Internet (Layer 3)
	Data link (Layer 2)
	Physical layer is not officially covered in the model





